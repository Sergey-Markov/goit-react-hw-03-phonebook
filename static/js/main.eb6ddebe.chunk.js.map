{"version":3,"sources":["App.module.css","Components/Contacts/Contacts.module.css","Components/Filter/Filter.module.css","Components/Form/Form.module.css","Components/Contacts/Contacts.js","Components/Filter/Filter.js","Components/Form/Form.js","App.js","index.js"],"names":["module","exports","Contacts","contacts","onClick","className","s","list","map","contact","id","name","number","item","type","button","Filter","filter","onChange","filterId","shortid","generate","htmlFor","label","pattern","title","required","value","input","Form","state","nameId","numberId","handleSubmit","e","preventDefault","props","onSubmit","resetFormInput","hadleAddValue","currentTarget","setState","this","form","Component","App","addToDataContacts","data","find","alert","newContact","deleteContact","contactId","prevState","onFilter","filteredContacts","normalizeFilter","toLowerCase","trim","includes","currentContacts","localStorage","getItem","parsedCurrentContacts","JSON","parse","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb6ddebe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2jo3_\",\"title\":\"App_title__1Rlx9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__2ArZQ\",\"item\":\"Contacts_item__OTAC8\",\"button\":\"Contacts_button__1U3He\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__34bF9\",\"input\":\"Filter_input__1oLxC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__oJbFO\",\"label\":\"Form_label__D-Lg0\",\"input\":\"Form_input__jSEKp\",\"button\":\"Form_button__2w3RH\"};","import s from '../Contacts/Contacts.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Contacts({ contacts, onClick }) {\n  return (\n    <ul className={s.list}>\n      {contacts.map(contact => {\n        const { id, name, number } = contact;\n        return (\n          <li key={id} className={s.item}>\n            {name}: {number}\n            <button\n              type=\"button\"\n              onClick={() => onClick(id)}\n              className={s.button}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport s from '../Filter/Filter.module.css';\n\nexport default function Filter({ filter, onChange }) {\n  const filterId = shortid.generate();\n  return (\n    <label htmlFor={filterId} className={s.label}>\n      Find contacts by name\n      <input\n        id={filterId}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={filter}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport s from '../Form/Form.module.css';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameId = shortid.generate();\n  numberId = shortid.generate();\n\n  resetFormInput() {\n    this.setState({ name: '', number: '' });\n  }\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.resetFormInput();\n  };\n  hadleAddValue = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={s.form}>\n        <label htmlFor={this.nameId} className={s.label}>\n          Name\n        </label>\n        <input\n          id={this.nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={this.state.name}\n          onChange={this.hadleAddValue}\n          className={s.input}\n        />\n        <label htmlFor={this.numberId} className={s.label}>\n          Number\n        </label>\n        <input\n          id={this.numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={this.state.number}\n          onChange={this.hadleAddValue}\n          className={s.input}\n        />\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport s from './App.module.css';\nimport Contacts from './Components/Contacts/Contacts';\nimport Filter from './Components/Filter/Filter';\nimport Form from './Components/Form/Form';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n  componentDidMount() {\n    const currentContacts = localStorage.getItem('contacts');\n    const parsedCurrentContacts = JSON.parse(currentContacts);\n\n    if (parsedCurrentContacts) {\n      this.setState({ contacts: parsedCurrentContacts });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addToDataContacts = data => {\n    if (this.state.contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already created!`);\n      return;\n    }\n\n    const newContact = {\n      id: shortid.generate(),\n      ...data,\n    };\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, newContact],\n    }));\n  };\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  onFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  filteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizeFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  };\n\n  render() {\n    const filteredContacts = this.filteredContacts();\n    return (\n      <div className={s.App}>\n        <h1 className={s.title}>Phonebook</h1>\n        <Form onSubmit={this.addToDataContacts} />\n        <h2 className={s.title}>Contacts:</h2>\n        <Filter filter={this.state.filter} onChange={this.onFilter} />\n        <Contacts contacts={filteredContacts} onClick={this.deleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}